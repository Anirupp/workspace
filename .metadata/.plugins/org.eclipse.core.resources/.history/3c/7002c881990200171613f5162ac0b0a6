sap.ui.controller("com.test.controller.Main", {

/**
* Called when a controller is instantiated and its View controls (if available) are already created.
* Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
* @memberOf view.Main
*/
	onInit: function() {
		alert("In Main Page");
		var oModel = new sap.ui.model.json.JSONModel();
		debugger;
		oModel.loadData("json/test.json");
		oModel.attachRequestCompleted(function(){
			
		});
		
		oModel.setData(oModel.loadData("json/test.json"));
		sap.ui.getCore().setModel(oModel.loadData("json/test.json"),"Jmodel");
		
		
	},
	handlePage1: function(evt){
		var router = sap.ui.core.UIComponent.getRouterFor(this);
		router.navTo("page1");
		// to move to a page without patterns
	//	router.getTargets().display("page1");
	},
	handlePage2: function(evt){
		var router = sap.ui.core.UIComponent.getRouterFor(this);
		var value=this.byId('idMain').mProperties.value;
		router.navTo("page2",{
				IV: value
			});
	},
	handlePage3: function(evt){
		var router = sap.ui.core.UIComponent.getRouterFor(this);
		router.navTo("page3",{
			page:"Notes"
		});
		// to move to a page without patterns
	//	router.getTargets().display("page1");
	}

/**
* Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
* (NOT before the first rendering! onInit() is used for that one!).
* @memberOf view.Main
*/
//	onBeforeRendering: function() {
//
//	},

/**
* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
* This hook is the same one that SAPUI5 controls get after being rendered.
* @memberOf view.Main
*/
//	onAfterRendering: function() {
//
//	},

/**
* Called when the Controller is destroyed. Use this one to free resources and finalize activities.
* @memberOf view.Main
*/
//	onExit: function() {
//
//	}

});